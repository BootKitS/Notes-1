<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>certificate</title>
      <link href="/2020/08/02/certificate/"/>
      <url>/2020/08/02/certificate/</url>
      
        <content type="html"><![CDATA[<h2 id="系统安装-CA-证书-链接"><a href="#系统安装-CA-证书-链接" class="headerlink" title="系统安装 CA 证书 链接"></a>系统安装 CA 证书 <a href="https://www.bounca.org/tutorials/install_root_certificate.html" target="_blank" rel="noopener">链接</a></h2><ul><li>chrome 无法信任 <a href="https://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate" target="_blank" rel="noopener">链接</a></li></ul><h2 id="Centos7-信任证书"><a href="#Centos7-信任证书" class="headerlink" title="Centos7 信任证书"></a>Centos7 信任证书</h2><ul><li>拷贝证书到目录 <code>/etc/pki/ca-trust/source/anchors/</code></li><li>然后执行 <code>update-ca-trust</code></li></ul><h2 id="Python-中使用-requests-访问自签名网站时出现错误"><a href="#Python-中使用-requests-访问自签名网站时出现错误" class="headerlink" title="Python 中使用 requests 访问自签名网站时出现错误"></a>Python 中使用 requests 访问自签名网站时出现错误</h2><ul><li><a href="https://unix.stackexchange.com/questions/90450/adding-a-self-signed-certificate-to-the-trusted-list" target="_blank" rel="noopener">链接1</a></li><li><a href="https://stackoverflow.com/questions/30405867/how-to-get-python-requests-to-trust-a-self-signed-ssl-certificate" target="_blank" rel="noopener">链接2</a></li></ul><h2 id="使用-openssl-创建-CA-证书和自签名证书"><a href="#使用-openssl-创建-CA-证书和自签名证书" class="headerlink" title="使用 openssl 创建 CA 证书和自签名证书"></a>使用 openssl 创建 CA 证书和自签名证书</h2><ul><li><a href="https://docs.azure.cn/zh-cn/articles/azure-operations-guide/application-gateway/aog-application-gateway-howto-create-self-signed-cert-via-openssl#%E5%88%9B%E5%BB%BA%E8%87%AA%E7%AD%BE-ca-%E8%AF%81%E4%B9%A6" target="_blank" rel="noopener">链接</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2020/08/02/docker/"/>
      <url>/2020/08/02/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h2><ul><li><a href="https://juejin.im/post/5b260ec26fb9a00e8e4b031a" target="_blank" rel="noopener">简单介绍</a></li></ul><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><ul><li>使用脚本安装<ul><li><code>curl -fsSL https://get.docker.com | VERSION=19.03.1 bash -s docker --mirror Aliyun</code></li><li><code>VERSION=19.03.1</code> 安装指定版本，不指定为最新版</li><li><code>--mirror Aliyun</code> 使用阿里云镜像源加速</li></ul></li><li>建立 docker 组  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure></li><li>启动 Docker CE  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li>退出当前终端并注销重新登录</li><li>配置镜像加速  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ul><h1 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h1><ul><li><a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noopener">官方文档</a></li><li>获取镜像: docker pull <code>&lt;image&gt;[:&lt;tag&gt;]</code><ul><li>example: docker pull mongo:3.6</li><li>tag 为空，会默认为 latest ，即最新版本</li></ul></li><li>运行容器: docker run [-p <code>[host_ip]:&lt;host_port&gt;:&lt;container_port&gt;] [-v [host_folder:]&lt;container_folder&gt;] [-d] [--rm] [--name &lt;container_name&gt;] &lt;image&gt;[:&lt;tag&gt;]</code><ul><li>example: <code>docker run -p 27017:27017 -d --rm --name my_mongo mongo:3.6</code></li><li>-p 为主机端口和容器端口的映射</li><li>-v 为挂载主机目录到容器</li><li>-d 后台运行容器</li><li>–rm 关闭容器后自动删除</li></ul></li><li>进入到容器: docker exec -it <container_name> command<ul><li>example: <code>docker exec -it my_mongo bash</code></li></ul></li><li>删除镜像: <code>docker rmi &lt;image&gt;[:&lt;tag&gt;]</code><ul><li>删除 TAG 为 none 的镜像: <code>docker images | grep none | awk &#39;{print $3}&#39; | xargs docker rmi</code></li></ul></li><li>保存镜像: <code>docker save &lt;image&gt;[:&lt;tag&gt;] -o filename</code><ul><li>压缩保存：<code>docker save &lt;image&gt;[:&lt;tag&gt;] | gzip &gt; filename</code></li></ul></li><li>导入镜像: <code>docker load -i filename</code><ul><li>批量导入镜像: <code>ls -1 *.tar.gz | xargs --no-run-if-empty -L 1 docker load -i</code></li></ul></li><li>镜像迁移到另一个机器: <code>docker save &lt;image&gt;[:&lt;tag&gt;] | bzip2 | pv | ssh &lt;username&gt;@&lt;hostname&gt; &#39;cat | docker load&#39;</code></li><li>私有仓库登录: docker login<ul><li><a href="https://stackoverflow.com/questions/42211380/add-insecure-registry-to-docker" target="_blank" rel="noopener">出现错误</a>：<code>Error response from daemon: Get https://your host/v2/: x509: cannot validate certificate for your host because it doesn&#39;t contain any IP SANs</code></li><li>解决方法: 在 <code>/etc/docker/daemon.json</code>(没有此文件自行新建) 添加<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"insecure-registries"</span> : [ <span class="string">"your docker hub host"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>然后重启 docker  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><ul><li><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">官方文档</a></p></li><li><p><strong>注意</strong>：</p><ul><li>构建过程中优先执行结果不经常变更的内容（例如 安装系统依赖和Python第三方包）</li><li>Dockerfile 中的每一条命令都会生个可读层 layer ，命令尽量合成一个一并执行</li><li>能写到 Docker compose file 中的一些配置，就写到 Docker compose file 里面 (比如 环境变量)</li><li>尽量减少镜像大小（1.安装依赖后清除缓存和下载的安装包，2.删除不需要的文件，中间生成文件，等等）</li><li>纯粹的数据卷容器，可以是关闭状态，只要有一个容器挂载了数据卷，数据就会一直存在</li></ul></li><li><p><code>FROM &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</code></p><ul><li><code>&lt;image&gt;[:&lt;tag&gt;]</code> 以 image 作为基底构建镜像，tag 为空，默认为 latest</li><li><code>[AS &lt;name&gt;]</code> 添加构建别名，如果 Dockerfile 中有多个 <code>FROM</code> 即可添加别名，构建时使用 <code>--target</code> 参数可以指定构建哪一个 </li></ul></li><li><p>ENTRYPOINT 和 CMD</p><ul><li>建议使用 exec 格式</li></ul></li><li><p>多个 <code>.dockerignore</code> 文件 <a href="https://github.com/moby/moby/issues/12886#issuecomment-480575928" target="_blank" rel="noopener">Link</a></p><ul><li>Docker 版本 19.03+</li><li><code>export DOCKER_BUILDKIT=1</code></li><li>dockerignore 文件名为 <code>&lt; Dockerfile name&gt;.dockerignore</code></li></ul></li></ul><h2 id="Docker-compose-file"><a href="#Docker-compose-file" class="headerlink" title="Docker compose-file"></a>Docker compose-file</h2><ul><li><p><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">官方文档</a></p></li><li><p><strong>注意</strong>：</p><ul><li>使用 Docker compose file 可以使用 <code>-f</code> 同时指定多个文件，同一个服务的不同配置会自动合并，而相同的配置将会出错</li></ul></li><li><p>depends_on</p><ul><li>设置容器的依赖关系，控制容器的启动顺序</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker_for_windows</title>
      <link href="/2020/08/02/docker_for_windows/"/>
      <url>/2020/08/02/docker_for_windows/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-for-windows-with-VirtualBox"><a href="#Docker-for-windows-with-VirtualBox" class="headerlink" title="Docker for windows with VirtualBox"></a>Docker for windows with VirtualBox</h1><h2 id="安装-Docker-和-Virtualbox"><a href="#安装-Docker-和-Virtualbox" class="headerlink" title="安装 Docker 和 Virtualbox"></a>安装 Docker 和 Virtualbox</h2><ul><li>使用安装包安装<ul><li>Docker <a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">官网地址</a></li><li>Virtualbox <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">官网地址</a></li></ul></li><li>使用 Chocolatey <ul><li>安装 chocolatey <a href="https://chocolatey.org/docs/installation" target="_blank" rel="noopener">地址</a></li><li>命令: <code>choco install docker-desktop virtualbox</code></li></ul></li></ul><h2 id="创建-Virtual-Machine"><a href="#创建-Virtual-Machine" class="headerlink" title="创建 Virtual Machine"></a>创建 Virtual Machine</h2><ul><li>打开 PowerShell</li><li>输入 <code>docker-machine create -d virtualbox default</code><ul><li>如果使用 vmwareworkstation 驱动，请到 <a href="https://github.com/pecigonzalo/docker-machine-vmwareworkstation/releases" target="_blank" rel="noopener">Github</a> 下载，将文件放置在 C:\ProgramData\DockerDesktop\version-bin`</li><li>安装 Vmware Workstation Pro 15</li><li><code>docker-machine create -d vmwareworkstation default</code></li></ul></li></ul><h2 id="设置环境变量（选其一）"><a href="#设置环境变量（选其一）" class="headerlink" title="设置环境变量（选其一）"></a>设置环境变量（选其一）</h2><h3 id="设置系统环境变量"><a href="#设置系统环境变量" class="headerlink" title="设置系统环境变量"></a>设置系统环境变量</h3><ul><li><p>打开 windows 环境变量设置，此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p></li><li><p>分别新建三个环境变量为</p><ul><li><p>DOCKER_HOST</p><ul><li>值：使用 docker-machine ls 获得 <img src="./images/dmls.png" alt="docker-machine-ls"></li><li>tcp://192.168.99.102:2376</li></ul></li><li><p>DOCKER_TLS_VERIFY</p><ul><li>值：1</li></ul></li><li><p>DOCKER_CERT_PATH</p><ul><li>值：<code>%USERPROFILE%/.docker/machine/machines/default</code></li></ul></li></ul></li></ul><h3 id="设置-终端环境变量"><a href="#设置-终端环境变量" class="headerlink" title="设置 终端环境变量"></a>设置 终端环境变量</h3><ul><li>docker-machine.exe env default | Invoke-Expression</li><li>code</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>打开 PowerShell 输入 <code>docker run hello-world</code></li><li>无错误即成功</li></ul><h2 id="设置共享路径"><a href="#设置共享路径" class="headerlink" title="设置共享路径"></a>设置共享路径</h2><ul><li>打开 VirtualBox 设置共享文件夹</li><li>如果不设置在启动 docker 容器时不能挂载文件</li></ul><h2 id="设置端口映射"><a href="#设置端口映射" class="headerlink" title="设置端口映射"></a>设置端口映射</h2><ul><li>打开 VirtualBox 网络设置，进行端口映射设置</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2020/08/02/git/"/>
      <url>/2020/08/02/git/</url>
      
        <content type="html"><![CDATA[<h2 id="Commit-Message-格式"><a href="#Commit-Message-格式" class="headerlink" title="Commit Message 格式"></a>Commit Message 格式</h2><p>目前规范使用较多的是 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noopener">Angular 团队的规范</a>, 它的 message 格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>标题行: 必填, 描述主要修改类型和内容<br>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等<br>页脚注释: 放 Breaking Changes 或 Closed Issues</p><p>分别由如下部分构成:</p><ul><li>type: commit 的类型<ul><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理</li></ul></li><li>scope: commit 影响的范围, 比如: view, model, utils, build…</li><li>subject: commit 的概述, 建议符合  <a href="https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting</a></li><li>body: commit 具体修改内容, 可以分为多行, 建议符合 <a href="https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting</a></li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接</li></ul><h2 id="Git-分支规范"><a href="#Git-分支规范" class="headerlink" title="Git 分支规范"></a>Git 分支规范</h2><h3 id="分支构成"><a href="#分支构成" class="headerlink" title="分支构成"></a>分支构成</h3><ul><li>master 主分支</li><li>dev 开发分支</li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li>新增功能，或者修复bug时，从以上分支或者其他主要分支拉取并新建分支格式为：<ul><li><code>&lt;username&gt;/&lt;fix | feat&gt;_&lt;something&gt;</code></li><li>例如：<code>tuo/feat_vcode</code> (新增验证码功能)</li></ul></li><li>每次合并代码之前使用 <code>git rebase &lt;a branch&gt;</code>，此分支为将要合并进去的分支  <ul><li>详细操作请看 <a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noopener">官方文档</a></li><li>如有冲突请仔细检查并解决冲突</li><li>此操作可保持提交记录整洁</li></ul></li></ul><h2 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h2><p><a href="https://git-scm.com/book/zh/v2/" target="_blank" rel="noopener">官方文档</a></p><ul><li><code>git commit --amend</code> 修改最近一次提交记录，包括commit message 、提交的内容(需将已修改的文件加入暂存区)</li><li><code>git stash</code> 保存工作区，增加参数 <code>pop</code> 可恢复</li><li><code>git rebase -i &lt;CommitHash&gt;</code> 修改历史提交记录，根据提示具体操作</li><li><code>git branch -d &lt;BranchName&gt;</code> 删除本地分支</li><li><code>git branch --remotes -d origin/&lt;BranchName&gt;</code> 已删除远程跟踪分支</li><li><code>git push origin --delete &lt;BranchName&gt;</code> 删除远程分支</li><li><code>git remote prune origin</code> 从本地版本库中去除远程已经删除的分支</li></ul><h2 id="学习-Git-命令-Learn-Git"><a href="#学习-Git-命令-Learn-Git" class="headerlink" title="学习 Git 命令 Learn Git"></a>学习 Git 命令 <a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mirror</title>
      <link href="/2020/08/02/mirror/"/>
      <url>/2020/08/02/mirror/</url>
      
        <content type="html"><![CDATA[<h2 id="一键更新镜像源"><a href="#一键更新镜像源" class="headerlink" title="一键更新镜像源"></a>一键更新镜像源</h2><ul><li><code>wget -qO- git.io/superupdate.sh | bash -s aliyun</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/2020/08/02/nginx/"/>
      <url>/2020/08/02/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a><a href="https://cloud.tencent.com/developer/article/1038524" target="_blank" rel="noopener">路由</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2020/08/02/python/"/>
      <url>/2020/08/02/python/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><ul><li><p>推荐使用 Miniconda</p><ul><li><a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">官方</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华源</a><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2></li></ul></li><li><p><a href="https://zhuanlan.zhihu.com/p/33896402" target="_blank" rel="noopener">解包压包</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rsync</title>
      <link href="/2020/08/02/rsync/"/>
      <url>/2020/08/02/rsync/</url>
      
        <content type="html"><![CDATA[<h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><ul><li><code>rsync -azvhP --delete --exclude .git/ &lt;SRC&gt; &lt;host&gt;:&lt;DST&gt;</code><ul><li><code>--delete</code> 删除那些 DST 中 SRC 没有的文件</li><li><code>--exclude</code> 指定排除不需要传输的文件模式</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>swapfile</title>
      <link href="/2020/08/02/swapfile/"/>
      <url>/2020/08/02/swapfile/</url>
      
        <content type="html"><![CDATA[<h2 id="swapfile-交换文件-大小修改"><a href="#swapfile-交换文件-大小修改" class="headerlink" title="swapfile 交换文件 大小修改"></a>swapfile 交换文件 大小修改</h2><ul><li>查看 swapfile 详情：<code>sudo swapon -s</code></li><li>禁用：<code>sudo swapoff /swapfile</code></li><li>删除：<code>sudo rm /swapfile</code></li><li>新建:：<code>sudo dd if=/dev/zero of=/swapfile bs=1G count=8</code></li><li>设置权限：<code>sudo chmod 600 /swapfile</code></li><li>设置格式化：<code>sudo mkswap /swapfile</code></li><li>启用：<code>sudo swapon /swapfile</code></li><li><code>/etc/fstab</code> 增加一行 <code>/swapfile swap swap defaults 0 0</code></li><li>文件可相应改为分区</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tar</title>
      <link href="/2020/08/02/tar/"/>
      <url>/2020/08/02/tar/</url>
      
        <content type="html"><![CDATA[<h2 id="tar命令详解"><a href="#tar命令详解" class="headerlink" title="tar命令详解"></a>tar命令详解</h2><ul><li><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。</p><ul><li><code>-c</code>: 建立压缩档案</li><li><code>-x</code>：解压</li><li><code>-t</code>：查看内容</li><li><code>-r</code>：向压缩归档文件末尾追加文件</li><li><code>-u</code>：更新原压缩包中的文件</li></ul></li><li><p>下面的参数是根据需要在压缩或解压档案时可选的</p><ul><li><code>-z</code>：有gzip属性的</li><li><code>-j</code>：有bz2属性的</li><li><code>-Z</code>：有compress属性的</li><li><code>-v</code>：显示所有过程</li><li><code>-O</code>：将文件解开到标准输出</li></ul></li><li><p>参数-f是必须的</p><ul><li><code>-f</code>: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</li></ul></li><li><p>tar -cf all.tar *.jpg 这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p></li><li><p>tar -rf all.tar *.gif 这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。 </p></li><li><p>tar -uf all.tar logo.gif 这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。 </p></li><li><p>tar -tf all.tar 这条命令是列出all.tar包中所有文件，-t是列出文件的意思 </p></li><li><p>tar -xf all.tar 这条命令是解出all.tar包中所有文件，-x是解开的意思</p></li></ul><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><ul><li>tar -tf aaa.tar.gz   在不解压的情况下查看压缩包的内容</li></ul><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ul><li><code>tar –cvf jpg.tar *.jpg</code> //将目录里所有jpg文件打包成tar.jpg</li><li><code>tar –czf jpg.tar.gz *.jpg</code> //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li><li><code>tar –cjf jpg.tar.bz2 *.jpg</code> //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li><li><code>tar –cZf jpg.tar.Z *.jpg</code>   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li></ul><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><ul><li><code>tar –xvf file.tar</code> //解压 tar包</li><li><code>tar -xzvf file.tar.gz</code> //解压tar.gz</li><li><code>tar -xjvf file.tar.bz2</code>   //解压 tar.bz2tar –xZvf file.tar.Z //解压tar.Z</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>*.tar</code> 用 tar –xvf 解压</li><li><code>*.gz</code> 用 gzip -d或者gunzip 解压</li><li><code>*.tar.gz</code> 和 <code>*.tgz</code> 用 tar –xzf 解压</li><li><code>*.bz2</code> 用 <code>bzip2 -d</code> 或者用bunzip2 解压</li><li><code>*.tar.bz2</code> 用tar –xjf 解压</li><li><code>*.Z</code> 用 uncompress 解压</li><li><code>*.tar.Z</code> 用tar –xZf 解压</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vpn</title>
      <link href="/2020/08/02/vpn/"/>
      <url>/2020/08/02/vpn/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos7-安装-PPTP"><a href="#Centos7-安装-PPTP" class="headerlink" title="Centos7 安装 PPTP"></a>Centos7 安装 PPTP</h2><ul><li><p>参考: </p><ul><li><a href="http://www.voidcn.com/article/p-gzwmgmpw-kv.html" target="_blank" rel="noopener">链接1</a></li><li><a href="http://blog.sina.com.cn/s/blog_beebb7590102wqh5.html" target="_blank" rel="noopener">链接2</a></li><li><a href="https://www.alibabacloud.com/help/zh/faq-detail/41345.htm#CentOSVPNclient" target="_blank" rel="noopener">链接3</a></li><li><a href="http://www.linuxdiyf.com/linux/31936.html" target="_blank" rel="noopener">链接4</a></li><li><a href="https://blog.csdn.net/liangxin95/article/details/79733180" target="_blank" rel="noopener">链接5</a></li></ul></li><li><p>安装依赖：yum install -y <code>ppp pptp pptp-setup</code></p></li><li><p>配置：<code>pptpsetup --create vpn --server &lt;服务器&gt; --username &lt;用户名&gt; --password &lt;密码&gt; --encrypt --start</code></p><ul><li>MPPE加密，pptpsetup时不需要使用–encrypt</li><li>出现 `LCP: timeout sending Config-Requests<pre><code>Connection terminated.` 可能是防火墙的问题</code></pre></li></ul></li><li><p>配置路由：</p><ul><li><code>route -n</code></li><li><code>ip route replace default dev ppp0</code> or <code>route add -net 192.168.1.0/24 gw 192.168.1.1 dev ppp0</code></li></ul></li></ul><h2 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h2><ul><li><p>连接使用: <code>openvpn --config &lt;your config&gt;.ovpn --auth-user-pass &lt;username and password in file&gt;</code></p></li><li><p>使用条件代理:</p><ul><li>不从服务端拉取代理配置，配置文件加入 <code>route-nopull</code></li><li>将 <code>192.168.10.*</code> 设置为使用OpenVPN代理，配置加入 <code>route 192.168.10.0 255.255.255.0 vpn_gateway</code></li><li>将 <code>vpn_gateway</code> 改为 <code>net_gateway</code> 可排除 IP 或者网段不走 VPN</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
